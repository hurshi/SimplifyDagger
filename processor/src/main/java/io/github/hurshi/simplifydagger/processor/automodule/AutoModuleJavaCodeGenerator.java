package io.github.hurshi.simplifydagger.processor.automodule;

import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.processing.Filer;

import io.github.hurshi.simplifydagger.processor.utils.Constant;
import io.github.hurshi.simplifydagger.processor.utils.Utils;


class AutoModuleJavaCodeGenerator {
    private static final String NAME_PREF = "Auto";
    private static final String NAME_SUFFER = "Module";

    static void autoComponentGenerator(Filer filer, List<AutoModuleWrapper> wrappers) {

        //按照scope归组
//        Map<Object, List<AutoModuleWrapper>> groupByScope =
//                wrappers.stream().collect(Collectors.groupingBy(AutoModuleWrapper::getScopeValue));

        Map<String, List<AutoModuleWrapper>> groupByScopeMap = new LinkedHashMap<>();
        for (AutoModuleWrapper w : wrappers) {
            String scopeValue = "";
            if (null != w.getScopeValue() && w.getScopeValue().toString().length() > 0 && w.getScopeValue() != void.class) {
                scopeValue = w.getScopeValue().toString();
            }
            List<AutoModuleWrapper> autoModuleWrappers = groupByScopeMap.get(scopeValue);
            if (null == autoModuleWrappers)
                autoModuleWrappers = new LinkedList<>();
            autoModuleWrappers.add(w);
            groupByScopeMap.put(scopeValue, autoModuleWrappers);
        }

        groupByScopeMap.forEach((scope, wrapperList) -> generateSingleScope(filer, scope, wrapperList));

    }

    private static void generateSingleScope(Filer filer, String simpleScopeValue, List<AutoModuleWrapper> autoModuleWrappers) {
        if (null == autoModuleWrappers || autoModuleWrappers.size() <= 0) return;
        simpleScopeValue = getRealSimpleScope(simpleScopeValue);
        String className = NAME_PREF + simpleScopeValue + NAME_SUFFER;
        String packageName = getPackageName(autoModuleWrappers);
        StringBuilder builder = new StringBuilder()
                .append(appendPackage(packageName))
                .append("@dagger.Module(includes = {")
                .append(getIncludedModules(autoModuleWrappers))
                .append("})\n")
                .append("public class ").append(className).append(" {\n}");
        Utils.writeJavaFile(filer, packageName + "." + className, builder);

    }


    private static StringBuilder getIncludedModules(List<AutoModuleWrapper> autoModuleWrappers) {
        StringBuilder stringBuilder = new StringBuilder();
        autoModuleWrappers.forEach(w -> {
            stringBuilder.append("\n").append(Constant.TAB).append(Constant.TAB)
                    .append(w.getTypeElement().getQualifiedName().toString()).append(",");
        });
        return stringBuilder.deleteCharAt(stringBuilder.length() - 1).append(".class");
    }

    private static String getRealSimpleScope(String simpleScopeValue) {
        if (null == simpleScopeValue || simpleScopeValue.length() <= 0) return "NoScope";
        else {
            String[] scopeSplit = simpleScopeValue.split("[.]");
            return scopeSplit[scopeSplit.length - 1];
        }
    }

    private static StringBuilder appendPackage(String packageName) {
        StringBuilder builder = new StringBuilder("// Generated by SimplifyDagger (https://github.com/hurshi/SimplifyDagger).\n");
        builder.append("package ").append(packageName).append(";\n")
                .append("\n");
        return builder;
    }

    private static String getPackageName(List<AutoModuleWrapper> wrappers) {
        String packageName = "";
        for (int i = 0; i < wrappers.size(); i++) {
            packageName = Utils.getSameHead(packageName, wrappers.get(i).getTypeElement().getQualifiedName().toString()
                    .replace("." + wrappers.get(i).getTypeElement().getSimpleName().toString(), ""));
        }
        while (packageName.endsWith(".")) {
            packageName = packageName.substring(0, packageName.length() - 1);
        }
        packageName += Constant.PACKAGE_NAME_SUFFIX;
        return packageName;
    }
}
