package io.github.hurshi.simplifydagger.processor.auto_android_component;

import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.annotation.processing.Filer;

import io.github.hurshi.simplifydagger.processor.utils.Constant;
import io.github.hurshi.simplifydagger.processor.utils.Logger;
import io.github.hurshi.simplifydagger.processor.utils.Utils;


class AutoAndroidComponentJavaCodeGenerator {
    private static final String NAME_PREF = "AutoAndroid";
    private static final String NAME_SUFFER = "ComponentInjector";

    static void autoComponentGenerator(Filer filer, List<AutoAndroidComponentWrapper> wrappers) {
        Map<String, List<AutoAndroidComponentWrapper>> map = new LinkedHashMap<>();
        for (AutoAndroidComponentWrapper w : wrappers) {
            String scope = "";
            if (null != w.getScopeValue() && w.getScopeValue().toString().length() > 0
                    && w.getScopeValue() != void.class) {
                String[] scopeSplit = w.getScopeValue().toString().split("[.]");
                scope = scopeSplit[scopeSplit.length - 1];
                Logger.log("scope = " + scope + " allScope = " + w.getScopeValue().toString());
            }
            List<AutoAndroidComponentWrapper> l = map.get(scope);
            if (null == l) {
                l = new LinkedList<>();
            }
            l.add(w);
            map.put(scope, l);
        }
        map.forEach((scope, wps) -> generateSingleScope(filer, scope, wps));
    }

    private static void generateSingleScope(Filer filer, String scope, List<AutoAndroidComponentWrapper> wrappers) {
        if (null == wrappers || wrappers.size() <= 0) {
            return;
        }
        String className = NAME_PREF + scope + NAME_SUFFER;
        String packageName = "io.github.hurshi.simplifydagger";
        StringBuilder builder = new StringBuilder()
                .append(appendPackage(packageName))
                .append("@dagger.Module\n")
                .append("public abstract class ").append(className).append(" {\n\n")
                .append(appendBody(wrappers))
                .append("}");

        Utils.writeJavaFile(filer, packageName + "." + className, builder);
    }


    private static StringBuilder appendPackage(String packageName) {
        StringBuilder builder = new StringBuilder("// Generated by SimplifyDagger (https://github.com/hurshi/SimplifyDagger).\n");
        builder.append("package ").append(packageName).append(";\n")
                .append("\n");
        return builder;
    }

    private static StringBuilder appendBody(List<AutoAndroidComponentWrapper> wrappers) {
        StringBuilder builder = new StringBuilder();
        wrappers.forEach(wrapper -> {
            builder.append(appendSingleWrapper(wrapper));
        });
        return builder;
    }

    private static StringBuilder appendSingleWrapper(AutoAndroidComponentWrapper wrapper) {
        return new StringBuilder()
                .append(appendScope(wrapper))
                .append(appendInjectorAndModules(wrapper))
                .append(appendMethod(wrapper));
    }


    private static StringBuilder appendScope(AutoAndroidComponentWrapper wrapper) {
        StringBuilder builder = new StringBuilder();
        //add scope if exist
        if (null != wrapper.getScopeValue() && wrapper.getScopeValue().toString().length() > 0
                && wrapper.getScopeValue() != void.class) {
            builder.append(Constant.TAB).append("@").append(wrapper.getScopeValue().toString()).append("\n");
        }
        return builder;
    }

    private static StringBuilder appendInjectorAndModules(AutoAndroidComponentWrapper wrapper) {
        StringBuilder builder = new StringBuilder(Constant.TAB).append("@dagger.android.ContributesAndroidInjector(");

        //add modules if exist
        boolean haveModule = null != wrapper.getModulesValue() && wrapper.getModulesValue().toString().length() > 0;
        boolean haveSubScope = null != wrapper.getSubScopeValue() && wrapper.getSubScopeValue().toString().length() > 0 && wrapper.getScopeValue() != void.class;
        String realScopeMiddleName = "";
        if (haveSubScope) {
            String[] temp = wrapper.getSubScopeValue().toString().split("[.]");
            if (temp.length >= 1) {
                realScopeMiddleName = temp[temp.length - 1];
            }
        }
        haveSubScope = realScopeMiddleName.length() > 0;

        if (haveModule || haveSubScope) {
            builder.append("modules = {");
            if (haveModule) builder.append(wrapper.getModulesValue().toString());
            if (haveModule && haveSubScope) builder.append(", ");
            if (haveSubScope)
                builder.append(NAME_PREF).append(realScopeMiddleName).append(NAME_SUFFER).append(".class");

            builder.append("}");
        }

        builder.append(")\n");
        return builder;
    }

    private static StringBuilder appendMethod(AutoAndroidComponentWrapper wrapper) {
        return new StringBuilder(Constant.TAB)
                .append("public abstract ").append(wrapper.getTypeElement().getQualifiedName().toString())
                .append(" inject").append(wrapper.getTypeElement().getSimpleName().toString())
                .append("();\n\n");
    }


}
